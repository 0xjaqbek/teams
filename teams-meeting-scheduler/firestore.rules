rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null &&
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Helper function to check if user owns resource or is admin
    function isOwnerOrAdmin() {
      return request.auth != null &&
             (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Users collection - allow users to read/write their own profile, admins can read all
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if isAdmin();
      allow create: if request.auth != null && request.auth.uid == userId;
    }

    // Meetings - users can access their own, admins can access all
    match /meetings/{meetingId} {
      allow read, write, delete: if isOwnerOrAdmin();
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write, delete, create: if isAdmin();
    }

    // Meeting logs - users can access their own, admins can access all
    match /meetingLogs/{logId} {
      allow read, write, delete: if isOwnerOrAdmin();
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read, write, delete, create: if isAdmin();
    }

  }
}
